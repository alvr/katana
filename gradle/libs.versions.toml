[versions]
android = "8.7.0"
androidx-activity = "1.9.2"
androidx-splashscreen = "1.0.1"
apollo = "4.0.1"
apollo-mockserver = "0.0.3"
arrow = "1.2.4"
compose = "1.7.0-alpha02"
compose-placeholder = "1.0.8"
compose-windowsize = "0.5.0"
datastore = "1.1.1"
detekt = "1.23.7"
detekt-compose = "0.4.15"
detekt-compose2 = "1.4.0"
kamel = "0.9.5"
kermit = "2.0.4"
kaml = { strictly = "0.59.0" }
koin = "4.0.0-RC1"
korge-foundation = "5.4.0"
kotest = "5.9.1"
kotlin = "2.0.20"
kotlinpoet = "1.18.1"
kotlinx-coroutines = "1.9.0"
kotlinx-immutable = "0.3.8"
kotlinx-serialization = "1.7.3"
kover = "0.8.3"
ksp = "2.0.20-1.0.25"
ktor = "2.3.12"
lifecycle = "2.8.2"
materialkolor = "2.0.0"
mockk = "1.13.13"
mokkery = "2.4.0"
navigation = "2.8.0-alpha08"
okio = "3.9.1"
orbit = "9.0.0"
sentry = "7.14.0"
sentry-multiplatform = "0.9.0"
sentry-plugin = "4.11.0"
tink = "1.15.0"
turbine = "1.1.0"

[plugins]
android-application = { id = "com.android.application", version.ref = "android" }
android-library = { id = "com.android.library", version.ref = "android" }
apollo = { id = "com.apollographql.apollo", version.ref = "apollo" }
compose = { id = "org.jetbrains.compose", version.ref = "compose" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
kotest = { id = "io.kotest.multiplatform", version.ref = "kotest" }
kotlin = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
mokkery = { id = "dev.mokkery", version.ref = "mokkery" }
sentry = { id = "io.sentry.android.gradle", version.ref = "sentry-plugin" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

[libraries]
# AndroidX
androidx-activity = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "androidx-splashscreen" }

# Apollo
apollo = { module = "com.apollographql.apollo:apollo-runtime", version.ref = "apollo" }
apollo-cache = { module = "com.apollographql.apollo:apollo-normalized-cache", version.ref = "apollo" }
apollo-cache-sqlite = { module = "com.apollographql.apollo:apollo-normalized-cache-sqlite", version.ref = "apollo" }
apollo-mockserver = { module = "com.apollographql.mockserver:apollo-mockserver", version.ref = "apollo-mockserver" }
apollo-test = { module = "com.apollographql.apollo:apollo-testing-support", version.ref = "apollo" }

# Arrow
arrow = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }

# Compose
compose-placeholder = { module = "com.eygraber:compose-placeholder-material3", version.ref = "compose-placeholder" }
compose-windowsize = { module = "dev.chrisbanes.material3:material3-window-size-class-multiplatform", version.ref = "compose-windowsize" }

# Datastore
datastore = { module = "androidx.datastore:datastore", version.ref = "datastore" }
datastore-okio = { module = "androidx.datastore:datastore-core-okio", version.ref = "datastore" }

# Detekt
detekt-compose = { module = "io.nlopez.compose.rules:detekt", version.ref = "detekt-compose" }
detekt-compose2 = { module = "ru.kode:detekt-rules-compose", version.ref = "detekt-compose2" }
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }

# Gradle
gradle-android = { module = "com.android.tools.build:gradle", version.ref = "android" }
gradle-apollo = { module = "com.apollographql.apollo:apollo-gradle-plugin", version.ref = "apollo" }
gradle-compose = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose" }
gradle-compose-compiler = { module = "org.jetbrains.kotlin.plugin.compose:org.jetbrains.kotlin.plugin.compose.gradle.plugin", version.ref = "kotlin" }
gradle-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
gradle-kotest = { module = "io.kotest:kotest-framework-multiplatform-plugin-gradle", version.ref = "kotest" }
gradle-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradle-kover = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
gradle-ksp = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version.ref = "ksp" }
gradle-mokkery = { module = "dev.mokkery:mokkery-gradle", version.ref = "mokkery" }
gradle-sentry = { module = "io.sentry:sentry-android-gradle-plugin", version.ref = "sentry-plugin" }
gradle-sentry-multiplatform = { module = "io.sentry.kotlin.multiplatform.gradle:io.sentry.kotlin.multiplatform.gradle.gradle.plugin", version.ref = "sentry-multiplatform" }

# Kamel
kamel = { module = "media.kamel:kamel-image", version.ref = "kamel" }

# Kermit
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }

# Kmal
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }

# Koin
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }

# KorGE Foundation
korge-foundation = { module = "com.soywiz.korge:korge-foundation", version.ref = "korge-foundation" }

# Kotlin
kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinx-immutable" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "kotlinx-serialization" }

# KotlinPoet
kotlinpoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }

# Ktor
ktor-android = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-ios = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }

# Lifecycle
lifecycle-runtime = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
lifecycle-viewmodel = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }

# MaterialKolor
materialkolor = { module = "com.materialkolor:material-kolor", version.ref = "materialkolor" }

# Navigation
navigation = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigation" }

# Okio
okio-fakefilesystem = { module = "com.squareup.okio:okio-fakefilesystem", version.ref = "okio" }

# Orbit
orbit = { module = "org.orbit-mvi:orbit-core", version.ref = "orbit" }
orbit-test = { module = "org.orbit-mvi:orbit-test", version.ref = "orbit" }

# Sentry
sentry = { module = "io.sentry:sentry-android-core", version.ref = "sentry" }
sentry-apollo = { module = "io.sentry:sentry-apollo-3", version.ref = "sentry" }
sentry-compose = { module = "io.sentry:sentry-compose-android", version.ref = "sentry" }
sentry-multiplatform = { module = "io.sentry:sentry-kotlin-multiplatform", version.ref = "sentry-multiplatform" }

# Tink
tink = { module = "com.google.crypto.tink:tink-android", version.ref = "tink" }

# Tests
## Kotest
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-engine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }

## MockK
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }

## Turbine
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }

[bundles]
# Deps for Multiplatform Core (Common, JVM & iOS)
core-common = [
    "arrow",
    "koin",
    "korge-foundation",
    "kotlin",
    "kotlinx-coroutines",
    "kotlinx-immutable",
]
core-jvm = []
core-ios = []

core-common-ksp = []
core-jvm-ksp = []
core-ios-ksp = []

core-common-test = [
    "koin-test",
    "kotest-assertions-core",
    "kotest-engine",
    "kotest-property",
    "kotlinx-coroutines-test",
    "turbine",
]
core-jvm-test = [
    "kotest-junit5",
    "mockk",
]
core-ios-test = []

core-common-test-ksp = []
core-jvm-test-ksp = []
core-ios-test-ksp = []

# Deps for Multiplatform Mobile (Common, Android & iOS)
mobile-common = [
    "arrow",
    "koin",
    "korge-foundation",
    "kotlin",
    "kotlinx-coroutines",
    "kotlinx-immutable",
    "kermit",
]
mobile-android = [
    "koin-android",
    "ktor-android",
]
mobile-ios = [
    "ktor-ios",
]

mobile-common-ksp = []
mobile-android-ksp = []
mobile-ios-ksp = []

mobile-common-test = [
    "koin-test",
    "kotest-assertions-core",
    "kotest-engine",
    "kotest-property",
    "kotlinx-coroutines-test",
    "turbine",
]
mobile-android-test = [
    "kotest-junit5",
    "mockk",
]
mobile-ios-test = []

mobile-common-test-ksp = []
mobile-android-test-ksp = []
mobile-ios-test-ksp = []

# Deps for Data Preferences
data-preferences-common = [
    "datastore",
    "datastore-okio",
    "kotlinx-serialization-protobuf",
]
data-preferences-android = [
    "tink",
]
data-preferences-ios = []

data-preferences-common-ksp = []
data-preferences-android-ksp = []
data-preferences-ios-ksp = []

data-preferences-common-test = [
    "okio-fakefilesystem",
]
data-preferences-android-test = []
data-preferences-ios-test = []

data-preferences-common-test-ksp = []
data-preferences-android-test-ksp = []
data-preferences-ios-test-ksp = []

# Deps for Data Remote
data-remote-common = [
    "apollo",
    "apollo-cache",
    "apollo-cache-sqlite",
]
data-remote-android = []
data-remote-ios = []

data-remote-common-ksp = []
data-remote-android-ksp = []
data-remote-ios-ksp = []

data-remote-common-test = [
    "apollo-mockserver",
    "apollo-test",
]
data-remote-android-test = []
data-remote-ios-test = []

data-remote-common-test-ksp = []
data-remote-android-test-ksp = []
data-remote-ios-test-ksp = []

# Deps for UI
ui-common = [
    "lifecycle-runtime",
    "lifecycle-viewmodel",
    "kamel",
    "koin-compose",
    "koin-compose-viewmodel",
    "kotlinx-serialization-json",
    "navigation",
    "orbit",
]
ui-android = []
ui-ios = []

ui-common-ksp = []
ui-android-ksp = []
ui-ios-ksp = []

ui-common-test = [
    "orbit-test",
]
ui-android-test = []
ui-ios-test = []

ui-common-test-ksp = []
ui-android-test-ksp = []
ui-ios-test-ksp = []

app-common = []
app-android = [
    "androidx-activity",
    "androidx-splashscreen",
    "sentry",
]
app-ios = []

gradle = [
    "gradle-android",
    "gradle-apollo",
    "gradle-compose",
    "gradle-compose-compiler",
    "gradle-detekt",
    "gradle-kotest",
    "gradle-kotlin",
    "gradle-kover",
    "gradle-ksp",
    "gradle-mokkery",
    "gradle-sentry",
    "gradle-sentry-multiplatform",
]
